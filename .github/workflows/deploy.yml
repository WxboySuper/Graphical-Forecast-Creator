name: Build and Deploy Site

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

permissions:
  contents: write
  pull-requests: write
  deployments: write
  statuses: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Extract version information
        id: version
        run: |
          # Extract version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          
          # Get short SHA (first 7 characters)
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          
          # For release builds, use tag name
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "app_version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            # For dev builds, use package.json version with DEV suffix and short SHA
            echo "app_version=${PACKAGE_VERSION}-DEV-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: npm install --no-fund --no-audit --loglevel=error

      - name: Build
        env:
          CI: ""  # Allow warnings in CI mode
          REACT_APP_ENV: ${{ github.event_name == 'release' && 'production' || 'development' }}
          REACT_APP_VERSION: ${{ steps.version.outputs.app_version }}
        run: npm run build

      # Upload build artifacts to use in deploy jobs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build
          retention-days: 1

      # Also upload version information as an artifact for other jobs
      - name: Upload version info
        uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: |
            echo "${{ steps.version.outputs.app_version }}" > version.txt
          retention-days: 1

  # Deploy to gh-pages (production) only on GitHub Release
  deploy-production:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build

      - name: Deploy to GitHub Pages (Production)
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build
          branch: gh-pages
          clean-exclude: |
            dev/**
            pr-preview/**

      - name: Create Deployment Status
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: production
          env_url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          deployment_id: ${{ github.event.release.id }}

  # Deploy to testing environment on push to main
  deploy-testing:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build
          
      - name: Download version info
        uses: actions/download-artifact@v4
        with:
          name: version-info
          path: .

      - name: Create Github Deployment
        id: deployment
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: development
          ref: ${{ github.sha }}

      - name: Deploy to GitHub Pages (Development)
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build
          branch: gh-pages
          target-folder: dev
          clean: true
          clean-exclude: |
            pr-preview/**
            !dev

      - name: Update Deployment Status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: development
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev

  # Deploy preview for pull requests (keep your existing logic)
  deploy-preview:
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build
          
      - name: Download version info
        uses: actions/download-artifact@v4
        with:
          name: version-info
          path: .

      # Create a deployment instead of using the PR preview action
      - name: Create GitHub Deployment
        id: deployment
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: pr-${{ github.event.pull_request.number }}
          ref: ${{ github.head_ref }}

      - name: Deploy PR to gh-pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build
          target-folder: pr-preview/pr-${{ github.event.pull_request.number }}
          branch: gh-pages
          clean-exclude: |
            pr-preview/!(pr-${{ github.event.pull_request.number }})
            !pr-preview
            dev/**

      # Update deployment status
      - name: Update Deployment Status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-preview/pr-${{ github.event.pull_request.number }}

      # Add a comment to the PR with the preview URL
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = fs.readFileSync('version.txt', 'utf8').trim();
            const previewUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/pr-preview/pr-${context.payload.pull_request.number}`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ PR Preview deployed!\n\nVersion: ${version}\nPreview: [${previewUrl}](${previewUrl})`
            });